version: '3.8'

services:
  redis:
    image: redis:7-alpine  # Alpine is smaller, perfect for development
    container_name: streamforge-redis
    ports:
      - "6379:6379"  # Maps container port to your localhost
    volumes:
      - redis-data:/data  # Persists data between restarts
    command: redis-server --appendonly yes  # Enables persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - streamforge-network
    restart: unless-stopped

  # MinIO - S3-compatible object storage for distributed file access
  minio:
    image: minio/minio:latest
    container_name: streamforge-minio
    ports:
      - "9000:9000"  # S3 API endpoint
      - "9001:9001"  # Web console (http://localhost:9001)
    volumes:
      - minio-data:/data
    environment:
      # TODO: Move these credentials to .env file for production
      MINIO_ROOT_USER: minioadmin      # Default user - CHANGE IN PRODUCTION
      MINIO_ROOT_PASSWORD: minioadmin  # Default password - CHANGE IN PRODUCTION
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - streamforge-network
    restart: unless-stopped

  # API Server - Your main application that handles uploads and streaming
  # This is your "origin server" in CDN terminology
  api:
    build:
      context: .
      dockerfile: Dockerfile.api  # Uses the Dockerfile.api recipe
    container_name: streamforge-api
    ports:
      - "3000:3000"  # Your API endpoint
    environment:
      # Container networking - services talk using container names
      REDIS_HOST: redis  # Instead of localhost:6379
      MINIO_ENDPOINT: minio:9000  # Instead of localhost:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      NODE_ENV: production
      # Supabase credentials for auth and database
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    depends_on:
      - redis
      - minio
    volumes:
      # Temporary directories for upload processing
      - ./uploads:/app/uploads
      - ./tmp:/app/tmp
    networks:
      - streamforge-network
    restart: unless-stopped

  # Worker - Processes video transcoding jobs from the queue
  # Scale this to add more processing power
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker  # Uses the Dockerfile.worker recipe
    container_name: streamforge-worker-1
    environment:
      REDIS_HOST: redis
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      NODE_ENV: production
      WORKER_CONCURRENCY: 2  # Each worker handles 2 videos simultaneously
      # Supabase credentials for database updates
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    depends_on:
      - redis
      - minio
    volumes:
      # Workers need temp space for transcoding
      - ./tmp:/app/tmp
      - ./transcoded:/app/transcoded
    networks:
      - streamforge-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G  # Limit memory to prevent OOM during transcoding

  # Nginx CDN - Edge cache server that sits in front of your origin
  # This simulates what Cloudflare/Akamai do at massive scale
  nginx-cdn:
    image: nginx:alpine
    container_name: streamforge-cdn
    ports:
      - "8080:80"  # CDN endpoint - users hit this instead of origin (3000)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Config file
      - ./nginx/cache:/var/cache/nginx  # Where cached videos are stored
    depends_on:
      - api  # Nginx needs the API to be running
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - streamforge-network
    restart: unless-stopped

networks:
  streamforge-network:
    driver: bridge

volumes:
  redis-data:  # Named volume for Redis data persistence
  minio-data:  # Named volume for MinIO object storage